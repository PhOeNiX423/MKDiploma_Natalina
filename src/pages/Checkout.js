import React, { useState, useEffect } from "react";
import { IMaskInput } from "react-imask";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import { CartContext } from "../contexts/CartContext";

const cities = ["–ú–æ—Å–∫–≤–∞"];
const districts = ["–Æ–∂–Ω—ã–π"];
const metros = ["–¢—É–ª—å—Å–∫–∞—è", "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∞—è", "–ù–∞–≥–æ—Ä–Ω–∞—è"];

export default function Checkout() {
  const { user } = useAuth();
  const { cart, getTotal, clearCart } = React.useContext(CartContext);
  const navigate = useNavigate();

  const [form, setForm] = useState({
    name: user?.name || "",
    phone: user?.phone || "",
    city: "",
    district: "",
    metro: "",
    comment: "",
  });

  const [error, setError] = useState("");
  const [success, setSuccess] = useState(false);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // üí° —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setError("");
    setSuccess(false);

    if (!form.city || !form.district || !form.metro || cart.length === 0) {
      setError(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞."
      );
      return;
    }

    const cleanPhone = "+7" + form.phone.replace(/\D/g, "").slice(-10);

    const orderData = {
      user_id: user?._id || null,
      name: form.name,
      phone: cleanPhone,
      products: cart.map((p) => ({
        product_id: p._id,
        title: p.title,
        price: p.price,
        quantity: p.quantity,
      })),
      total_amount: getTotal(),
      status: "–ø–µ—Ä–µ–¥–∞–Ω –≤ –æ—Ñ–∏—Å",
      city: form.city,
      district: form.district,
      metro: form.metro,
      comment: form.comment,
    };

    try {
      if (!user) {
        try {
          const checkRes = await fetch(
            `${process.env.REACT_APP_DB_URL_USERS}/check-phone`,
            {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ phone: cleanPhone, name: form.name }),
            }
          );

          if (checkRes.status === 409) {
            const data = await checkRes.json();
            setError(data.message);
            return;
          }
        } catch (err) {
          console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞", err);
        }
      }
      const res = await fetch(`${process.env.REACT_APP_DB_URL_ORDERS}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(orderData),
      });

      if (res.status === 201) {
        setSuccess(true);
        setError(""); // –µ—â—ë —Ä–∞–∑ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        clearCart();
        setTimeout(() => navigate("/"), 2000);
      } else {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.");
      }
    } catch (err) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.");
    }
  };

  useEffect(() => {
    if (error) {
      const timeout = setTimeout(() => setError(""), 5000);
      return () => clearTimeout(timeout);
    }
  }, [error]);

  return (
    <div className="max-w-xl mx-auto py-8">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="text-center">
        <h1 className="font-mbrody text-3xl md:text-5xl font-semibold text-pinkaccent mb-4">
          –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        </h1>
        <p className="text-pinksecondary text-lg">
          –í—Å–µ–≥–æ –ø–∞—Ä–∞ —à–∞–≥–æ–≤ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏!
        </p>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      <div className="mt-6 space-y-4">
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï–¢ —É—Å–ø–µ—Ö–∞ */}
        {!success && error && (
          <div className="w-full text-sm text-red-600 bg-red-100 border border-red-300 rounded-lg px-4 py-2 text-center">
            {error}
          </div>
        )}

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö, –µ—Å–ª–∏ success === true */}
        {success && (
          <div className="w-full text-sm text-green-700 bg-green-100 border border-green-300 rounded-lg px-4 py-2 text-center">
            –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!
          </div>
        )}
      </div>

      {/* –§–æ—Ä–º–∞ */}
      <div className="mt-8">
        <form className="flex flex-col gap-4" onSubmit={handleSubmit}>
          <input
            type="text"
            name="name"
            placeholder="–í–∞—à–µ –∏–º—è"
            value={form.name}
            onChange={handleChange}
            className="border rounded p-2"
            required
            disabled={!!user}
          />

          <IMaskInput
            mask="+7 (000) 000-00-00"
            value={form.phone}
            unmask={false}
            onAccept={(value) => setForm({ ...form, phone: value })}
            className="border rounded p-2"
            placeholder="+7 (___) ___-__-__"
            name="phone"
            required
            disabled={!!user}
          />

          <select
            name="city"
            value={form.city}
            onChange={handleChange}
            className="border rounded p-2"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>
            {cities.map((c) => (
              <option key={c} value={c}>
                {c}
              </option>
            ))}
          </select>

          <select
            name="district"
            value={form.district}
            onChange={handleChange}
            className="border rounded p-2"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω</option>
            {districts.map((d) => (
              <option key={d} value={d}>
                {d}
              </option>
            ))}
          </select>

          <select
            name="metro"
            value={form.metro}
            onChange={handleChange}
            className="border rounded p-2"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–æ</option>
            {metros.map((m) => (
              <option key={m} value={m}>
                {m}
              </option>
            ))}
          </select>

          <textarea
            name="comment"
            value={form.comment}
            onChange={handleChange}
            placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"
            className="border rounded p-2"
          />

          <button
            type="submit"
            className="bg-pinkaccent text-white py-2 px-4 rounded hover:bg-pink-700 transition"
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
          </button>
        </form>
      </div>
    </div>
  );
}
